Exercício 01: Retorne o documento com o _id igual a 8.
  -> use bios;
  -> db.bios.find( { _id: 5 } );

******************************
Exercício 02: Retorne o documento com o _id igual a 8, mas só exiba os atributos: _id e name.
  -> use bios;
  -> db.bios.find( { _id: 5 } );
******************************
Exercício 03: Retorne apenas os atributos name e birth do documento com o _id igual a 8.
  -> use bios;
  -> db.bios.find( { _id: 5 }, {_id: 0, name: 1, birth: 1} );
******************************
Exercício 04: Retorne todos os documentos em que o atributo name.first seja igual a John, utilizando o método pretty().
  -> use bios;
  -> db.bios.find( { "name.first": "John" }).pretty();
******************************
Exercício 05: Retorne os 3 primeiros documentos da coleção bios utilizando o método pretty().
  -> use bios;
  -> db.bios.find().limit(3);
******************************
Exercício 06: Retorne 2 documentos da coleção bios pulando os 5 primeiros documentos.
  -> use bios;
  -> db.bios.find().skip(5).limit(2);
******************************
Exercício 07: Retorne a quantidade de documentos da coleção books.
  -> use bios;
  -> db.books.count();
******************************
Exercício 08: Conte quantos livros existem com o status = "PUBLISH".
  -> use books;
  -> db.books.find({ "status": "PUBLISH" }).count();
******************************
Exercício 09: Exiba os atributos title, isbn e pageCount dos 3 primeiros livros. NÃO retorne o atributo _id.
  -> use books;
  -> db.books.find( {}, {_id: 0, title: 1, isbn: 1, pageCount: 1} ).limit(3);
******************************
Exercício 10: Pule 5 documentos e exiba os atributos _id, title, authors e status dos livros com o status = "MEAP",
limitando-se a 10 documentos.
  -> use books;
  -> db.books.find( { "status": "MEAP" }, {_id: 1, title: 1, authors: 1, status: 1} ).skip(5).limit(10);