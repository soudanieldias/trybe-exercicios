// Busca por Filtro

// Buscando na coleção inventory os elementos que possuem no atributo "qty" o valor menor que 20
-> db.inventory.find({ qty: { $lt: 20 } });

// Menor ou igual a 20
-> db.inventory.find({ qty: { $lte: 20 } });

// Maior que 20;
-> db.inventory.find({ qty: { $gt: 20 } });

// Maior ou igual a 20;
-> db.inventory.find({ qty: { $gte: 20 } });

// igual à 20;
-> db.inventory.find({ qty: { $eq: 20 } });

// Equivalente a 20 (SEJA NÚMERO OU STRING);
-> db.inventory.find({ qty: { $eq: 20 } });

// Não é igual a 20 (!==), (incluindo os que não possuem o atributo qty);
-> db.inventory.find({ qty: { $ne: 20 } });

// Esta contido em (É um dos elementos), (qty === 5 || qty === 15);
-> db.inventory.find({ qty: { $in: [ 5, 15 ] } });

// Que não está contido em um dos elementos. (incluindo os que não possuem o atributo qty);
-> db.inventory.find( { qty: { $nin: [ 5, 15 ] } } );

************************************

// Operador $exists { campo: { $exists: <boolean> } }

// Retorna todos os elementos cujo Campo qty existe no atributo da collection
  -> db.inventory.find({ qty: { $exists: true } });

// Combinação de Operadores
// Retorna todos os elementos cujo Campo qty existe e não esteja contido em [ 5, 15 ]
  -> db.inventory.find({ qty: { $exists: true, $nin: [ 5, 15 ] } })

************************************

// Operador $not
// { campo: { $not: { <operador ou expressão> } } }

// Essa consulta seleciona todos os documentos na coleção inventory em que o valor do atributo price
// é menor ou igual a 1.99 (em outras palavras, não é maior que 1.99), ou em que o atributo price não existe.
// IMPORTANTE: a expressão { $not: { $gt: 1.99 } } retorna um resultado diferente do operador $lte.
// Ao utilizar { $lte: 1.99 }, os documentos retornados serão somente aqueles em que o campo price existe
// e cujo valor é menor ou igual a 1.99.
  -> db.inventory.find({ price: { $not: { $gt: 1.99 } } })

************************************

// Operador $or
// O operador $or executa a operação lógica OU em um array de uma ou mais expressões e seleciona
// os documentos que satisfaçam ao menos uma das expressões.
  -> { $or: [{ <expression1> }, { <expression2> }, ... , { <expressionN> }] };

// Essa consulta seleciona todos os documentos da coleção inventory em que o valor do atributo qty
// é menor do que 20 ou o valor do atributo price é igual a 10.
  -> db.inventory.find({ $or: [{ qty: { $lt: 20 } }, { price: 10 }] });

************************************

// Operador $nor
// O operador $nor também executa uma operação lógica de NEGAÇÃO, porém, em um array de uma ou mais expressões,
// e seleciona os documentos em que todas essas expressões falhem, ou seja,
// seleciona os documentos em que todas as expressões desse array sejam falsas.
  -> { $nor: [ { <expressão1> }, { <expressão2> }, ...  { <expressãoN> } ] }

// Essa query retorna todos os documentos da coleção inventory que:
// Contêm o atributo price com o valor diferente de 1.99 e o atributo sale com o valor diferente de true;
// Ou contêm o atributo price com valor diferente de 1.99 e não contêm o atributo sale;
// Ou não contêm o atributo price e contêm o atributo sale com valor diferente de true;
// Ou não contêm o atributo price e nem o atributo sale.
  -> db.inventory.find({ $nor: [{ price: 1.99 }, { sale: true }] })

************************************

// Operador $and
// Executa a lógica &, e seleciona todos os elementos que satisfaçam todas as expressões no array;

// Essa consulta seleciona todos os documentos da coleção inventory em que o valor do atributo price
// é diferente de 1.99 e o atributo price existe.
  -> { $and: [{ <expressão1> }, { <expressão2> } , ... , { <expressãoN> }] }
  -> db.inventory.find({
    $and: [
      { price: { $ne: 1.99 } },
      { price: { $exists: true } }
    ]
  });


// Essa consulta seleciona todos os documentos da coleção inventory em que o valor do campo price
// é maior que 0.99 e menor que 1.99, E o valor do atributo sale é igual a true,
// OU o valor do atributo qty é menor do que 20. Ou seja, essa expressão é equivalente a (price > 0.99 E price < 1.99)
// (onde o E está implícito na vírgula aqui { $gt: 0.99, $lt: 1.99 }) E (sale = true OU qty < 20).
  -> db.inventory.find({
    and: [
      { price: { $gt: 0.99, $lt: 1.99 } },
      {
        or: [
          { sale : true },
          { qty : { $lt : 20 } }
        ]
      }
    ]
  });

************************************

// Usando um valor positivo (1) como valor do atributo, os documentos da consultas são ordenados
  -> db.colecao.find().sort({ "campo": "1 ou -1"})

// de forma crescente ou alfabética (também ordena por campos com strings).
// Em complemento, usando um valor negativo (-1), os documentos de saída estarão
// em ordem decrescente ou contra alfabética.

// Esse método pode ser combinado com o método find():
  -> db.example.find({}, { value, name }).sort({ value: -1 }, { name: 1 })

// O sort() só pode ser usado se tiver algum resultado de busca antes:
  -> db.colecao.find().sort({ nomeDoAtributo: 1 }) // certo
  -> db.colecao.sort({ nomeDoAtributo: 1 }) // errado

// Exemplo
  -> db.example.insertMany([
    { "name": "Mandioquinha Frita", "price": 14 },
    { "name": "Litrão", "price": 8 },
    { "name": "Torresmo", "price": 16 }
  ]);

// Resultado esperado:
  -> db.example.find().sort({ "price": 1 }).pretty();
{
        "_id" : ObjectId("5f7dd0582e2738debae74d6c"),
        "name" : "Litrão",
        "price" : 8
}
{
        "_id" : ObjectId("5f7dd0582e2738debae74d6b"),
        "name" : "Mandioquinha Frita",
        "price" : 14
}
{
        "_id" : ObjectId("5f7dd0582e2738debae74d6d"),
        "name" : "Torresmo",
        "price" : 16
}

// Resultado esperado:
 -> db.example.find().sort({ "price": -1 }, { "name" : 1 }).pretty()
{
        "_id" : ObjectId("5f7dd0582e2738debae74d6d"),
        "name" : "Torresmo",
        "price" : 16
}
{
        "_id" : ObjectId("5f7dd0582e2738debae74d6b"),
        "name" : "Mandioquinha Frita",
        "price" : 14
}
{
        "_id" : ObjectId("5f7dd0582e2738debae74d6c"),
        "name" : "Litrão",
        "price" : 8
}

************************************
// O exemplo abaixo remove o primeiro documento da coleção inventory em que o atributo status é igual a D:
  -> db.inventory.deleteOne({ status: "D" })

// O exemplo abaixo remove todos os documentos da coleção inventory em que o atributo status é igual a A:
  -> db.inventory.deleteMany({ status: "A" })

// Para remover todos os documentos da coleção, basta não passar nenhum parâmetro para o método deleteMany():
  -> db.inventory.deleteMany({})